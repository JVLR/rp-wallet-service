Crie uma su√≠te de testes unit√°rios e de integra√ß√£o em JUnit 5 para a aplica√ß√£o de linha de comando (CLI) que calcula imposto de ganho de capital, conforme o desafio do Nubank.

üß™ Regras gerais:
- Use JUnit 5
- Use BigDecimal nos testes para compara√ß√£o com precis√£o
- Cada linha de entrada √© uma simula√ß√£o independente
- As sa√≠das devem ser listas JSON contendo os impostos pagos para cada opera√ß√£o

üß™ Testes unit√°rios esperados:

1. **Compra n√£o gera imposto**
   - Entrada: [{"operation": "buy", "unit-cost": 10.00, "quantity": 100}]
   - Sa√≠da esperada: [{"tax": 0.0}]

2. **Venda com lucro e valor total maior que R$ 20.000 paga imposto**
   - Entrada: [{"operation": "buy", "unit-cost": 10.00, "quantity": 10000}, {"operation": "sell", "unit-cost": 20.00, "quantity": 5000}]
   - Lucro: R$ 50.000 ‚Üí imposto: R$ 10.000
   - Sa√≠da esperada: [{"tax": 0.0}, {"tax": 10000.0}]

3. **Venda com lucro, mas valor total da venda menor ou igual a R$ 20.000 (isen√ß√£o)**
   - Entrada: [{"operation": "buy", "unit-cost": 10.00, "quantity": 100}, {"operation": "sell", "unit-cost": 15.00, "quantity": 50}]
   - Valor total: R$ 750.00 ‚Üí isento
   - Sa√≠da esperada: [{"tax": 0.0}, {"tax": 0.0}]

4. **Venda com preju√≠zo acumula perda**
   - Entrada: [{"operation": "buy", "unit-cost": 10.00, "quantity": 10000}, {"operation": "sell", "unit-cost": 5.00, "quantity": 5000}]
   - Preju√≠zo: R$ 25.000 ‚Üí imposto: R$ 0.00
   - Sa√≠da esperada: [{"tax": 0.0}, {"tax": 0.0}]

5. **Compensa√ß√£o de preju√≠zo em venda futura com lucro**
   - Entrada: [{"operation": "buy", "unit-cost": 10.00, "quantity": 10000},
              {"operation": "sell", "unit-cost": 5.00, "quantity": 5000},
              {"operation": "sell", "unit-cost": 20.00, "quantity": 3000}]
   - Preju√≠zo acumulado: R$ 25.000
   - Lucro na 2¬™ venda: R$ 30.000 ‚Üí lucro tribut√°vel: R$ 5.000 ‚Üí imposto: R$ 1.000
   - Sa√≠da esperada: [{"tax": 0.0}, {"tax": 0.0}, {"tax": 1000.0}]

6. **Venda com lucro sem preju√≠zo, mas isenta por valor total ‚â§ R$ 20.000**
   - Entrada: [{"operation": "buy", "unit-cost": 10.00, "quantity": 100}, {"operation": "sell", "unit-cost": 15.00, "quantity": 50}]
   - Valor total da venda: R$ 750.00
   - Sa√≠da esperada: [{"tax": 0.0}, {"tax": 0.0}]

7. **Venda com lucro, ap√≥s preju√≠zos j√° compensados (imposto cheio)**
   - Entrada:
     [{"operation": "buy", "unit-cost": 10.00, "quantity": 10000},
      {"operation": "sell", "unit-cost": 2.00, "quantity": 5000},
      {"operation": "sell", "unit-cost": 20.00, "quantity": 2000},
      {"operation": "sell", "unit-cost": 20.00, "quantity": 2000},
      {"operation": "sell", "unit-cost": 25.00, "quantity": 1000}]
   - √öltima venda gera lucro de R$ 15.000 sem mais preju√≠zo ‚Üí imposto: R$ 3.000
   - Sa√≠da esperada: [{"tax": 0.0}, {"tax": 0.0}, {"tax": 0.0}, {"tax": 0.0}, {"tax": 3000.0}]

üß™ Testes de integra√ß√£o esperados:

8. **Simula√ß√£o completa com m√∫ltiplas linhas**
   - Duas linhas de entrada devem ser processadas como simula√ß√µes separadas, com estados independentes
   - Entrada:
     ```
     [{"operation": "buy", "unit-cost": 10.00, "quantity": 100},
      {"operation": "sell", "unit-cost": 15.00, "quantity": 50}]
     
     [{"operation": "buy", "unit-cost": 10.00, "quantity": 10000},
      {"operation": "sell", "unit-cost": 20.00, "quantity": 5000}]
     ```
   - Sa√≠da:
     ```
     [{"tax": 0.0}, {"tax": 0.0}]
     [{"tax": 0.0}, {"tax": 10000.0}]
     ```

9. **Verificar que cada linha reinicia o estado (compra/venda anteriores n√£o afetam simula√ß√µes seguintes)**

10. **Teste de precis√£o com BigDecimal:**
   - Teste de m√©dia ponderada com valores como R$ 20,00 e R$ 10,00 ‚Üí m√©dia esperada: R$ 16.67

Extra:
11. **Teste com entrada que gera m√∫ltiplas vendas seguidas com e sem isen√ß√£o**
12. **Teste com opera√ß√£o de venda que utiliza exatamente o restante do preju√≠zo acumulado**

üßæ Dica:
- Utilize `assertEquals(new BigDecimal("1000.00"), result.getTax())` para garantir precis√£o nas compara√ß√µes.
- Simule entrada e sa√≠da em testes de integra√ß√£o com `ByteArrayInputStream` e `ByteArrayOutputStream`.

Crie essas classes de teste em um diret√≥rio `src/test/java`, e organize os testes por cen√°rios distintos.
